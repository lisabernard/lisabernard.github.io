"""
Write a console application that simulates the playing of the game battleship.
The game should read in a file called map.txt into a two-dimensional list.

Each occurrence of the number one in the map indicates a ship location.

The goal of this simplified version of the Battleship game is to sink all ships
before running out of missiles. The goal count down from 30 missiles but you can
modify the game to ask how many missiles you’d like to start with if you wish.
The program should implement all safeguards against user errors such as
validating against invalid entries.
Bonus Marks: Add functionality to the game such that the user is notified when a
ship has been definitively sunk. You’ll likely need to modify the contents of the
map so that it stores more than just ones and zeros in order to identify each ship
individually.

A completed sample application is provided to provide guidance.
"""

# imports csv
import csv

# opens the csv file in read
fileName = "battleship_board.csv"
accessMode = "r"
lineCount = 1
# used to sort the board in rows
board = []
# used to sort the board into 100 coordinates
coords = []
#  used to create the shots board
fired = []
# number of ships left to sink
number_of_ships = 5

# create the shot board
for step in range(100):
    fired.append('-')
ship = []

# list of all of the letters needed
letter = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]
fileLine = open(fileName, accessMode)

# reads through the file adding its information to board
with open(fileName, accessMode) as csvFile:
    fileContents = csv.reader(csvFile)
    for row in fileLine:
        a = row[0:-1]
        fileLine = csv.reader(fileContents)
        board.append(a)
        lineCount += 1

# prints the properly formated list
counts = 0
number = 1

# created a list of coordinates and stores hit of miss info
for record in board:
    quad = letter[counts] + str(number) + " " + str(record[0])
    number += 1
    quad2 = letter[counts] + str(number) + " " + str(record[2])
    number += 1
    quad3 = letter[counts] + str(number) + " " + str(record[4])
    number += 1
    quad4 = letter[counts] + str(number) + " " + str(record[6])
    number += 1
    quad5 = letter[counts] + str(number) + " " + str(record[8])
    number += 1
    quad6 = letter[counts] + str(number) + " " + str(record[10])
    number += 1
    quad7 = letter[counts] + str(number) + " " + str(record[12])
    number += 1
    quad8 = letter[counts] + str(number) + " " + str(record[14])
    number += 1
    quad9 = letter[counts] + str(number) + " " + str(record[16])
    number += 1
    quad10 = letter[counts] + str(number) + " " + str(record[18])
    number = 1
    coords.append(quad)
    coords.append(quad2)
    coords.append(quad3)
    coords.append(quad4)
    coords.append(quad5)
    coords.append(quad6)
    coords.append(quad7)
    coords.append(quad8)
    coords.append(quad9)
    coords.append(quad10)
    counts += 1

# shot tracking list
shots = []
# total shots left
amo = 30

# open second map
myFile = "map.txt"
accessMode2 = "r"
myFile = open(myFile, accessMode2)
fileLine2 = myFile.readline()
lineCount = 0

# input the coordinates of the second map into a list called ship
while fileLine2:
    a = fileLine2[0]
    b = fileLine2[1]
    c = fileLine2[2]
    d = fileLine2[3]
    e = fileLine2[4]
    f = fileLine2[5]
    g = fileLine2[6]
    h = fileLine2[7]
    i = fileLine2[8]
    j = fileLine2[9]
    ship.append(a)
    ship.append(b)
    ship.append(c)
    ship.append(d)
    ship.append(e)
    ship.append(f)
    ship.append(g)
    ship.append(h)
    ship.append(i)
    ship.append(j)
    lineCount += 1
    fileLine2 = myFile.readline()

# used to make sure the code runs once
once1 = 0
once2 = 0
once3 = 0
once4 = 0
once5 = 0

# loop stop when user runs out of amo
while amo != 0:
    # output changes from plural to singular if there is only one ship left
    if number_of_ships > 1:
        print("You currently have", number_of_ships, "ships and", amo, "shots left.")

    if number_of_ships == 1:
        print("You currently have", number_of_ships, "ships and", amo, "shots left.")

    # sets variables for updating the board
    output = ""
    count = 0

    # updates shots board
    for step in fired:
        output += str(step) + " "
        count += 1
        if count % 10 == 0:
            output += "\n"

    # print the board
    print("\n" + output)
    # takes in the user's shot
    shot = input("Please input the coordinate of where you want to shoot! ")
    # creates a variable called target which is used in the shots list
    target = shot
    # used to validate the user's shot
    check = shot[0].lower()
    check2 = int(shot[1:3])

    # validates the shot, if invalid, it loops until the user enters a good shot
    while check.count("a") + check.count("b") + check.count("c") + check.lower().count("d") + check.count("e") + \
            check.count("f") + check.count("g") + check.count("h") + check.count("i") + check.count(letter[9]) !=\
            1 or check2 - 10 > 0:
        print("You currently have", number_of_ships, "ships and", amo, "shots left.")
        shot = input("Please input the coordinate of where you want to shoot! ")
        check = shot[0].lower()
        check2 = int(shot[1:3])

    # these convert the shot into an index
    if shot[0].lower() == "a":
        shot = int(shot[1:3]) - 1

    elif shot[0].lower() == "b":
        shot = int(shot[1:3]) + 9

    elif shot[0].lower() == "c":
        shot = int(shot[1:3]) + 19

    elif shot[0].lower() == "d":
        shot = int(shot[1:3]) + 29

    elif shot[0].lower() == "e":
        shot = int(shot[1:3]) + 39

    elif shot[0].lower() == "f":
        shot = int(shot[1:3]) + 49

    elif shot[0].lower() == "g":
        shot = int(shot[1:3]) + 59

    elif shot[0].lower() == "h":
        shot = int(shot[1:3]) + 69

    elif shot[0].lower() == "i":
        shot = int(shot[1:3]) + 79

    elif shot[0].lower() == "j":
        shot = int(shot[1:3]) + 89

    # for a hit
    if str(coords[shot])[-1] == "1":
        status = "Hit!\n"
        # updates board
        fired[shot] = "X"
        # removes the target
        ship[shot] = "0"

    # for a miss
    if str(coords[shot])[-1] == "0":
        status = "Miss!\n"
        # updates board
        fired[shot] = "O"

    # adds the shot to the shots list
    shots.append(shot)
    # updates the total amo
    amo -= 1

    # detects if the user shoot the same spot more than once
    count = shots.count(shot)
    if count > 1:
        status = "You've already shot there you amo waster!\n"  # repeats the coordinate once
        if count > 2:
            status = "Stop it!!!"  # repeats it two or more times

    # keep a running total of targets
    ship1 = ship.count("a")
    ship2 = ship.count("b")
    ship3 = ship.count("c")
    ship4 = ship.count("d")
    ship5 = ship.count("f")

    # updates ship count every time a user sinks a battleship
    if ship1 == 0 and once1 == 0:
        status += "You sunk my battleship :_( \n"
        number_of_ships -= 1
        once1 = 1

    if ship2 == 0 and once2 == 0:
        status += "You sunk my battleship :_( \n"
        number_of_ships -= 1
        once2 = 1

    if ship3 == 0 and once3 == 0:
        status += "You sunk my battleship :_( \n"
        number_of_ships -= 1
        once3 = 1

    if ship4 == 0 and once4 == 0:
        status += "You sunk my battleship :_( \n"
        number_of_ships -= 1
        once4 = 1

    if ship5 == 0 and once5 == 0:
        status += "You sunk my battleship :_( \n"
        number_of_ships -= 1
        once5 = 1

    # ends loop when the user hits all targets
    if fired.count("X") == 17:
        print("You win...")
        break

    # prints game updates
    print(status)
